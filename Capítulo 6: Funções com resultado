Como exercício, use o desenvolvimento incremental para escrever uma função chamada hypotenuse, que devolva o comprimento da hipotenusa de um triângulo retângulo
dados os comprimentos dos outros dois lados como argumentos. Registre cada etapa do processo de desenvolvimento no decorrer do processo.

        1º versão: 
        import math

        a = int(8)
        b = int(10)
        c = math.hypot(a, b)

        print(c)

        2° versão:
        import math

        def hypotenuse(a, b):
            c = math.hypot(a, b)
            return c

        print(hypotenuse(10, 8))

Como um exercício, escreva uma função is_between(x, y, z) que retorna True, se x <= y <= z, ou False, se não for o caso
        def is_between(x, y, z):
         if x <= y <= z:
             return True
         else:
             return False 

        print(is_between(20,4,6))


Exercício 6.1

Desenhe um diagrama da pilha do seguinte programa. O que o programa exibe?
def b(z):
    prod = a(z, z)
    print(z, prod)
    return prod

def a(x, y):
    x = x + 1
    return x * y

def c(x, y, z):
    total = x + y + z
    square = b(total)**2
    return square

x = 1
y = x + 1
print(c(x, y+3, x+y))

        def b(z):                   #Função criada com o nome b, recebe como argumento o z
            prod = a(z, z)          #Determina a variavel prod, que recebe o valor de a(z,z)
            print(z, prod)          #Imprime o valor de z, prod
            return prod             #Retorna o valor de prod

        def a(x, y):                #Função criada com o nome a, recebe como argumento o x, y
            x = x + 1               #Determina a variavel x, que recebe o x+1
            return x * y            #Retorna o valor de x*y

        def c(x, y, z):             #Função criada com o nome c, recebe como argumento x, y, z
            total = x + y + z       #Determina a variavel total, que recebe x + y + z
            square = b(total)**2    #Criação da variavel square, que recebe o b(total)**2
            return square           #Retorna o valor do square

        x = 1                       #x atribui o valor de 1
        y = x + 1                   #y atribui o valor de 2
        print(c(x, y+3, x+y))       #imprime a soma dos valores 

        '''
        __main__:
            x --> 1
            y --> 2
        c:
            x --> 1
            y --> 5
            z --> 3
            total --> 9
            square --> 0
        b:
            z --> 9
            prod --> 0
        a:
            x --> 9
            y --> 9
            x --> 10
        b:
            z --> 9
            prod --> 90
        c:
            x --> 1
            y --> 5
            z --> 3
            total --> 9
            square --> 8100
        '''

Exercício 6.2

A função de Ackermann, A(m, n), é definida assim:
A(m,n) = { n+1                 se m = 0
           A(m -1,1)           se m > 0 e n = 0
           A(m - 1, A(m,n -1)) se m > 0 e n > 0
Veja http://en.wikipedia.org/wiki/Ackermann_function. Escreva uma função denominada ack que avalie a função de Ackermann. Use a sua função para avaliar ack(3, 4),
cujo resultado deve ser 125. O que acontece para valores maiores de m e n?

Solução: http://thinkpython2.com/code/ackermann.py.

        def ack(m,n):
         if m == 0:
             return n+1
         elif m > 0 and n == 0:
             return ack(m - 1, 1)
         else:
             return ack(m - 1, ack(m, n -1))

        print(ack(3,4))

Exercício 6.3
Um palíndromo é uma palavra que se soletra da mesma forma nos dois sentidos, como “osso” e “reviver”. Recursivamente, uma palavra é um palíndromo se a primeira e 
última letras forem iguais e o meio for um palíndromo.

As funções seguintes recebem uma string como argumento e retornam as letras iniciais, finais e do meio das palavras:
def first(word):
    return word[0]
def last(word):
    return word[-1]
def middle(word):
    return word[1:-1]
Veremos como funcionam no Capítulo 8.

Digite essas funções em um arquivo chamado palindrome.py e teste-as. O que acontece se chamar middle com uma string de duas letras? Uma letra? E se a string estiver
vazia, escrita com '' e não contiver nenhuma letra?
        O retorno foi vazio, sem resposta

Escreva uma função chamada is_palindrome que receba uma string como argumento e retorne True se for um palíndromo e False se não for. Lembre-se de que você pode usar
a função integrada len para verificar o comprimento de uma string.

        def first(word):
            return word[0]
        def last(word):
            return word[-1]
        def middle(word):
            return word[1:-1]

        def is_polindrome(word):
            if len(word) < 1:
                return True
            elif first(word) != last(word):
                return False
            else:
                return is_polindrome(middle(word))

        print(is_polindrome('sabrina'))
        print(is_polindrome('ana'))
Solução: http://thinkpython2.com/code/palindrome_soln.py.
   
Exercício 6.4

Um número a é uma potência de b se for divisível por b e a/b for uma potência de b. Escreva uma função chamada is_power que receba os parâmetros a e b e retorne True
se a for uma potência de b. Dica: pense no caso-base.

        def is_power(a,b):
            if a==b:
                return True
            elif a % b != 0:
                return False
            else:
                return is_power(a/b, b)

        print(is_power(10, 10))

Exercício 6.5

O maior divisor comum (MDC, ou GCD em inglês) de a e b é o maior número que divide ambos sem sobrar resto.
Um modo de encontrar o MDC de dois números é observar qual é o resto r quando a é dividido por b, verificando que gcd(a, b) = gcd(b, r). Como caso-base, podemos usar
gcd(a, 0) = a.
Escreva uma função chamada gcd que receba os parâmetros a e b e devolva o maior divisor comum.
Crédito: Este exercício é baseado em um exemplo do livro de Abelson e Sussman, Structure and Interpretation of Computer Programs (Estrutura e interpretação de
programas de computador, MIT Press, 1996).

        def mvc(a, b):
            if a % b == 0:
                return b
            return mvc(b, a % b)

        print(mvc(16, 8))
        print(mvc(140, 25))

