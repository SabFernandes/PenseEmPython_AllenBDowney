Exercícios
Há soluções para estes exercícios na próxima seção. Mas é bom você tentar fazer cada um antes de ver as soluções.

Exercício 9.1
Escreva um programa que leia words.txt e imprima apenas as palavras com mais de 20 caracteres (sem contar whitespace).

    fin = open('words.txt')
    line = fin.readline()

    for line in fin:
        word = line.strip()
        if len(word) > 20:
            print(word)

Exercício 9.2
Em 1939, Ernest Vincent Wright publicou uma novela de 50.000 palavras, chamada Gadsby, que não contém a letra “e”. Como o “e” é a letra mais comum em inglês, isso
não é algo fácil de fazer.
Na verdade, é difícil até construir um único pensamento sem usar o símbolo mais comum do idioma. No início é lento, mas com prudência e horas de treino, vai ficando
cada vez mais fácil.
Muito bem, agora eu vou parar.
Escreva uma função chamada has_no_e que retorne True se a palavra dada não tiver a letra “e” nela.
Altere seu programa na seção anterior para imprimir apenas as palavras que não têm “e” e calcule a porcentagem de palavras na lista que não têm “e”.

    1° versão:
    def has_no_e(word, letter):
    if letter in word:
        return False
    else: 
        return True
    
    print(has_no_e('banana', 'e'))

    2° versão:
    def has_no_e(word):
    for letter in word:
        if letter == 'e':
            return False
        else: 
            return True
    
    print(has_no_e('none'))
    
    3° versão: 
    def has_no_e(word):
     for letter in word:
      if letter == 'e':
       return False
     return True
    
    print(has_no_e('Muito bem, agora eu vou parar.'))
    
    4° versão:
    def has_no_e(word):
     for letter in word:
      if letter == 'e':
       return False
     return True

    print(has_no_e('Muito bem, agora eu vou parar.'))

    A = print('Muito bem, agora eu vou parar.'.count('e'))
    B = 'Muitobemagoraeuvouparar'
    C = print(len(B))

    print(str((100 * A/C) + '%'))
    
Exercício 9.3
Escreva uma função chamada avoids que receba uma palavra e uma série de letras proibidas, e retorne True se a palavra não usar nenhuma das letras proibidas.
Altere o código para que o usuário digite uma série de letras proibidas e o programa imprima o número de palavras que não contêm nenhuma delas. Você pode encontrar
uma combinação de cinco letras proibidas que exclua o menor número possível de palavras?

Exercício 9.4
Escreva uma função chamada uses_only que receba uma palavra e uma série de letras e retorne True, se a palavra só contiver letras da lista. Você pode fazer uma frase
usando só as letras acefhlo? Que não seja “Hoe alfalfa?”

Exercício 9.5
Escreva uma função chamada uses_all que receba uma palavra e uma série de letras obrigatórias e retorne True se a palavra usar todas as letras obrigatórias pelo menos
uma vez. Quantas palavras usam todas as vogais (aeiou)? E que tal aeiouy?

Exercício 9.6
Escreva uma função chamada is_abecedarian que retorne True se as letras numa palavra aparecerem em ordem alfabética (tudo bem se houver letras duplas). Quantas palavras
em ordem alfabética existem?
