Exercícios

Exercício 3.1
Escreva uma função chamada right_justify, que receba uma string chamada s como parâmetro e exiba a string com espaços suficientes à frente para que a 
última letra da string esteja na coluna 70 da tela:

    def right_justify(s):
        print(' ' * (70 - len(s)) + s)

    right_justify('Monty')

Exercício 3.2
Um objeto de função é um valor que pode ser atribuído a uma varíavel ou passados como argumento. Por exemplo, do_twice é uma função que toma um objeto
de função como argumento e o chama duas vezes:
def do_twice(f):
 f()
 f()
Aqui está um exemplo que usa do_twice para chamar uma função chamada print_spam duas vezes:
def print_spam():
 print('spam')
 do_twice(print_spam)
 
1. Digite este exemplo em um sprint e teste-o
  Resposta retornada pelo console: Spam
                                   Spam
                                   
2. Altere do_twice para que receba dois argumentos, um objeto de função e um valor, e chame a função duas vezes, passando o valor como um argumento
  def do_twice(f, arg):
   f(arg)
   f(arg)

  def print_spam(arg):
   print(arg)
   print(arg)

  do_twice(print, 'spam')
  print(' ')
  
3. Copie a definição de print_twice que aparece anteriormente neste capítulo no seu script
   Esta função atribui o argumento a um parâmetro chamado arg. Quando a função é chamada, ela exibe o valor do parâmentro (seja qual for) duas vezes.
   Podemos usar qualquer tipo de expressão como argumento para print_twice
  
4. Use a versão alterada de do_twice para chamar print_twice duas vezes, passando 'spam' como um argumento
  do_twice(print, 'spam')
  print(' ')

5. Defina uma função nova chamada do_four que receba um objeto de função e um valor e chame a função quatro vezes, passando o valor como um parâmetro.
Deve haver só duas afirmações no corpo desta função, não quatro
  def do_twice(f, arg):
   f(arg)
   f(arg)

  def print_spam(arg):
   print(arg)
   print(arg)

  do_twice(print, 'spam')
  print(' ')

  def do_four(f, arg):
   do_twice(f, arg)
   do_twice(f, arg)

  do_four(print, 'spam')
  print(' ')
 
 Exercício 3.3
 Nota: Este exercício deve ser feito usando-se apenas as instruções e outros recursos que aprendemos até agora
 
 1. Escreva uma função que desenhe uma grade como o seguinte:
 + - - - - + - - - - +
 |         |         |
 |         |         |
 |         |         |
 |         |         |
 + - - - - + - - - - +
 |         |         |
 |         |         |
 |         |         |
 |         |         |
 + - - - - + - - - - +
 
Dica: para exibir mais de um valor em uma linha, podemos usar uma sequência de valores separados por vírgula:
print('+', '-')
Por padrão, print avança para a linha seguinte, mas podemos ignorar esse comportamento e inserir um espaço no fim, desta forma: python print('+', end = ' ')
print('-'), a saida dessas intruções é + -. Uma intrução print sem arumento termina na linha atual e vai para a próxima linha
    print('+', '- ' * 4, '+', '- ' * 4, '+')

    def do_four(f, arg):
     f(arg)
     f(arg)
     f(arg)
     f(arg)

    def print_four(arg):
     print(arg)
     print(arg)
     print(arg)
     print(arg)

    do_four(print, '|          ' *3)
    print('+', '- ' * 4, '+', '- ' * 4, '+')
    do_four(print, '|          ' *3)
    print('+', '- ' * 4, '+', '- ' * 4, '+')
    
2. Escreva uma função que desenhe uma grade semelhante com quatro linhas e quatro colunas
    def do_twice(fn):
     fn()
     fn()

    def do_four(fn):
     do_twice(fn)
     do_twice(fn)

    def print_border():
     print(('+ ' + '- ' * 4) *4 + '+')

    def print_row():
      print('|         ' *5)

    def grid():
     print_border()
     do_four(print_row)

    def make_grid():
     do_twice(grid)
     print_border()

    make_grid()
